.. _example:

*****************************
Shadow calculation
*****************************

| ``pybdshadow`` is a python package to analyze building shadow.
| The latest stable release of the software can be installed via pip and
  full documentation can be found
  `here <https://pybdshadow.readthedocs.io/en/latest/>`__.

Building data
=============

``pybdshadow`` is capable of generating shadows from building outline
data. Building outline data can be obtain by Python package
`OSMnx <https://osmnx.readthedocs.io/en/stable/>`__ from OpenStreetMap.
The buildings are usually store in the data as the form of Polygon
object with ``height`` column.

::

    import pandas as pd
    import geopandas as gpd
    import pybdshadow
    #Read building data
    buildings = gpd.read_file(r'data/bd_demo.json')
    buildings




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>id</th>
          <th>height</th>
          <th>x</th>
          <th>y</th>
          <th>geometry</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>42</td>
          <td>139.698802</td>
          <td>35.533816</td>
          <td>POLYGON ((139.69831 35.53380, 139.69831 35.533...</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>9</td>
          <td>139.698402</td>
          <td>35.534030</td>
          <td>POLYGON ((139.69799 35.53417, 139.69799 35.533...</td>
        </tr>
        <tr>
          <th>2</th>
          <td>2</td>
          <td>45</td>
          <td>139.698491</td>
          <td>35.534637</td>
          <td>POLYGON ((139.69864 35.53445, 139.69863 35.534...</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3</td>
          <td>9</td>
          <td>139.698784</td>
          <td>35.534735</td>
          <td>POLYGON ((139.69864 35.53477, 139.69866 35.534...</td>
        </tr>
        <tr>
          <th>4</th>
          <td>4</td>
          <td>90</td>
          <td>139.700506</td>
          <td>35.536064</td>
          <td>POLYGON ((139.70015 35.53590, 139.70039 35.535...</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>1369</th>
          <td>27826</td>
          <td>5</td>
          <td>139.708790</td>
          <td>35.552112</td>
          <td>POLYGON ((139.70876 35.55223, 139.70869 35.552...</td>
        </tr>
        <tr>
          <th>1370</th>
          <td>27827</td>
          <td>43</td>
          <td>139.706311</td>
          <td>35.551746</td>
          <td>POLYGON ((139.70637 35.55183, 139.70621 35.551...</td>
        </tr>
        <tr>
          <th>1371</th>
          <td>27828</td>
          <td>16</td>
          <td>139.705786</td>
          <td>35.551667</td>
          <td>POLYGON ((139.70583 35.55179, 139.70572 35.551...</td>
        </tr>
        <tr>
          <th>1372</th>
          <td>27829</td>
          <td>14</td>
          <td>139.708900</td>
          <td>35.551267</td>
          <td>POLYGON ((139.70867 35.55133, 139.70867 35.551...</td>
        </tr>
        <tr>
          <th>1373</th>
          <td>27830</td>
          <td>16</td>
          <td>139.708320</td>
          <td>35.550467</td>
          <td>POLYGON ((139.70837 35.55071, 139.70823 35.550...</td>
        </tr>
      </tbody>
    </table>
    <p>1374 rows × 5 columns</p>
    </div>



Preprocess building data using ``bd_preprocess`` before calculate
shadow. It will remove empty polygons and convert multipolygons into
polygons.

::

    buildings = pybdshadow.bd_preprocess(buildings)

Shadow analysis
===============

Shadow generated by Sun light
-----------------------------

Given a building GeoDataFrame and UTC datetime, ``pybdshadow`` can
calculate the building shadow based on the sun position obtained by
``suncalc``

::

    #Given UTC time
    date = pd.to_datetime('2015-01-01 02:45:33.959797119')
    #Calculate shadows
    shadows = pybdshadow.bdshadow_sunlight(buildings,date)
    shadows




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>building_id</th>
          <th>geometry</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>POLYGON ((139.69831 35.53380, 139.69831 35.533...</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>POLYGON ((139.69881 35.53389, 139.69881 35.533...</td>
        </tr>
        <tr>
          <th>2</th>
          <td>2</td>
          <td>POLYGON ((139.69837 35.53484, 139.69837 35.535...</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3</td>
          <td>POLYGON ((139.69864 35.53477, 139.69864 35.534...</td>
        </tr>
        <tr>
          <th>4</th>
          <td>4</td>
          <td>POLYGON ((139.70015 35.53590, 139.70016 35.535...</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>1366</th>
          <td>1366</td>
          <td>POLYGON ((139.70882 35.55199, 139.70882 35.551...</td>
        </tr>
        <tr>
          <th>1367</th>
          <td>1367</td>
          <td>POLYGON ((139.70621 35.55182, 139.70621 35.552...</td>
        </tr>
        <tr>
          <th>1368</th>
          <td>1368</td>
          <td>POLYGON ((139.70570 35.55159, 139.70570 35.551...</td>
        </tr>
        <tr>
          <th>1369</th>
          <td>1369</td>
          <td>POLYGON ((139.70867 35.55133, 139.70867 35.551...</td>
        </tr>
        <tr>
          <th>1370</th>
          <td>1370</td>
          <td>POLYGON ((139.70823 35.55070, 139.70823 35.550...</td>
        </tr>
      </tbody>
    </table>
    <p>1371 rows × 2 columns</p>
    </div>



::

    #Visualize buildings and shadows using matplotlib
    import matplotlib.pyplot as plt
    fig = plt.figure(1,(12,12))
    ax = plt.subplot(111)
    
    shadows.plot(ax = ax,facecolor = (0,0,0,0.3))
    buildings.plot(ax = ax,edgecolor = 'k')
    
    plt.show()



.. image:: output_10_0.png


``pybdshadow`` also provide visualization method supported by keplergl.

::

    #Visualize using keplergl
    pybdshadow.show_bdshadow(buildings = buildings,shadows = shadows)


.. parsed-literal::

    User Guide: https://docs.kepler.gl/docs/keplergl-jupyter



.. parsed-literal::

    KeplerGl(config={'version': 'v1', 'config': {'visState': {'filters': [], 'layers': [{'id': 'lz48o3', 'type': '…


.. figure:: https://github.com/ni1o1/pybdshadow/raw/main/image/README/1649161376291.png
   :alt: 1649161376291.png

   1649161376291.png

Shadow generated by Point light
-------------------------------

``pybdshadow`` can also calculate the building shadow generated by point
light. Given coordinates and height of the point light:

::

    #Calculate building shadow for point light
    shadows = pybdshadow.bdshadow_pointlight(buildings,139.713319,35.552040,200)
    #Visualize buildings and shadows
    pybdshadow.show_bdshadow(buildings = buildings,shadows = shadows)


.. figure:: https://github.com/ni1o1/pybdshadow/raw/main/image/README/1649405838683.png
   :alt: 1649405838683.png

   1649405838683.png

Advertisment billboard analyze
==============================

Billboard visual area analyze
-----------------------------

To analyze billboard visual area, the parameter ``ad_params`` for the
billboard should be defined. It has two forms:

::

    #ad_params for the billboard should be defined. It has two forms
    #1. Given the coordinates of brandCenter, orientation and height
    ad_params = {'orientation': 1.2806657381630058,
                'height': 10,
                'brandCenter': [139.71259, 35.552842999999996]} 
    
    #2. Given the coordinates of the two border points and height
    ad_params = {'point1': [139.711861, 35.552040],
                'point2': [139.713319, 35.553646],#1861,3646
                'height': 50,
                }

We can calculate the visual area of the billboard using
``ad_visualArea``.

::

    #calculate the visual area
    visualArea,shadows = pybdshadow.ad_visualArea(ad_params,buildings)

Then, visualize the billboard and the visual area.

::

    
    
    #Generate a GeoDataFrame from ad_params for visualization
    billboard_gdf = pybdshadow.ad_to_gdf(ad_params,billboard_height = 100)
    
    #Visualize buildings, shadows, billboard and visual area
    pybdshadow.show_bdshadow(buildings=buildings,
                             shadows=shadows,
                             ad=billboard_gdf,
                             ad_visualArea=visualArea)


.. figure:: https://github.com/ni1o1/pybdshadow/raw/main/image/README/1649406044109.png
   :alt: 1649406044109.png

   1649406044109.png

Optimize billboard parameters
-----------------------------

Optimize advertisment parameters using Genetic Algorithm

::

    #Define area boundaries
    bounds = [139.707846,35.543637,139.718567,35.553909]
    
    #Optimize billboard parameters
    ad_params = pybdshadow.ad_optimize(bounds,
                                       buildings,
                                       height_range=[100,200],
                                       printlog=True,
                                       size_pop=10,
                                       max_iter=10,
                                       prob_mut=0.001,
                                       precision=1e-7)
    ad_params


::

    #calculate the visual area
    visualArea,shadows = pybdshadow.ad_visualArea(ad_params,buildings)
    
    #Generate a GeoDataFrame from ad_params for visualization
    billboard_gdf = pybdshadow.ad_to_gdf(ad_params,billboard_height = 100)
    
    #Visualize buildings, shadows, billboard and visual area
    pybdshadow.show_bdshadow(buildings=buildings,
                             shadows=shadows,
                             ad=billboard_gdf,
                             ad_visualArea=visualArea)
